name: Release Helm charts (module or service tag → gh-pages)

on:
  push:
    tags:
      - 'common/*'           # e.g., common/1.0.0
      - 'core/*'             # e.g., core/1.0.0
      - 'urban/*'            # e.g., urban/1.0.0
      - 'health/*'           # e.g., health/1.0.0
      - 'frontend/*'         # e.g., frontend/1.0.0
      - 'core/*/*'           # e.g., core/egov-user/1.0.1
      - 'urban/*/*'          # e.g., urban/ws-service/2.3.4
      - 'health/*/*'         # e.g., health/expense/0.0.9
      - 'frontend/*/*'       # e.g., frontend/digit-ui/1.0.5

permissions:
  contents: write

concurrency:
  group: helm-release-gh-pages
  cancel-in-progress: false

jobs:
  release:
    runs-on: ubuntu-latest
    env:
      GH_PAGES_HOST: helm.digit.org
      CHARTS_DIR: charts             # <-- base directory for all modules/charts
    steps:
      - name: Checkout (full history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Helm & yq
        run: |
          set -e
          curl -fsSL https://get.helm.sh/helm-v3.15.4-linux-amd64.tar.gz | tar xz
          sudo mv linux-amd64/helm /usr/local/bin/helm
          rm -rf linux-amd64
          curl -fsSL -o /usr/local/bin/yq https://github.com/mikefarah/yq/releases/download/v4.44.3/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq

      - name: Parse tag → mode/module/service/version
        id: parse
        shell: bash
        run: |
          REF="${GITHUB_REF_NAME}"   # core/1.0.0 OR core/egov-user/1.0.1, etc.
          IFS='/' read -r P1 P2 P3 <<< "$REF"
          if [[ -n "${P3:-}" ]]; then
            echo "mode=service" >> $GITHUB_OUTPUT
            echo "module=$P1"   >> $GITHUB_OUTPUT
            echo "service=$P2"  >> $GITHUB_OUTPUT
            echo "version=$P3"  >> $GITHUB_OUTPUT
          else
            echo "mode=module"  >> $GITHUB_OUTPUT
            echo "module=$P1"   >> $GITHUB_OUTPUT
            echo "service="     >> $GITHUB_OUTPUT
            echo "version=$P2"  >> $GITHUB_OUTPUT
          fi
          echo "ref=$REF" >> $GITHUB_OUTPUT

      - name: Find base tag (compare against correct scope)
        id: base
        shell: bash
        run: |
          set -euo pipefail
          MODE='${{ steps.parse.outputs.mode }}'
          MOD='${{ steps.parse.outputs.module }}'
          SRV='${{ steps.parse.outputs.service }}'
          REF='${{ steps.parse.outputs.ref }}'
          BASE=""
          if [[ "$MODE" == "module" ]]; then
            BASE=$(git tag -l | grep -E "^${MOD}/[0-9]+\.[0-9]+\.[0-9]+$" \
                   | grep -v "^${REF}$" | sort -V | tail -1 || true)
          else
            BASE=$(git tag -l | grep -E "^${MOD}/${SRV}/[0-9]+\.[0-9]+\.[0-9]+$" \
                   | grep -v "^${REF}$" | sort -V | tail -1 || true)
            [[ -n "$BASE" ]] || BASE=$(git tag -l | grep -E "^${MOD}/[0-9]+\.[0-9]+\.[0-9]+$" | sort -V | tail -1 || true)
          fi
          echo "base=$BASE" >> $GITHUB_OUTPUT

      - name: Select charts to package
        id: select
        shell: bash
        run: |
          set -euo pipefail
          MODE='${{ steps.parse.outputs.mode }}'
          MOD='${{ steps.parse.outputs.module }}'
          SRV='${{ steps.parse.outputs.service }}'
          BASE='${{ steps.base.outputs.base }}'
          ROOT="${CHARTS_DIR}/${MOD}"

          echo "Mode: $MODE  Module: $MOD  Service: ${SRV:-<none>}  Base: ${BASE:-<none>}"
          echo "Module root: $ROOT"
          test -d "$ROOT" || { echo "::error::Module directory not found: $ROOT"; exit 1; }

          # files we produce:
          #  - /tmp/names.txt -> chart names (e.g., egov-user)
          #  - /tmp/dirs.txt  -> full dirs (e.g., charts/core/egov-user)
          : > /tmp/names.txt
          : > /tmp/dirs.txt

          if [[ "$MOD" == "common" ]]; then
            echo "common" > /tmp/names.txt
            echo "${CHARTS_DIR}/common" > /tmp/dirs.txt

          elif [[ "$MODE" == "service" ]]; then
            SRV_DIR="${ROOT}/${SRV}"
            if [[ -z "$BASE" ]] || git diff --name-only "$BASE"..HEAD -- "$SRV_DIR" | grep -q .; then
              echo "$SRV"         >> /tmp/names.txt
              echo "$SRV_DIR"     >> /tmp/dirs.txt
            else
              echo "unchanged=true" >> $GITHUB_OUTPUT
              echo "No changes detected for $SRV_DIR since ${BASE:-<none>}."
            fi

          else
            # first look up to one level deep for Chart.yaml (supports charts nested one subfolder deep)
            mapfile -t DIRS < <(find "$ROOT" -mindepth 1 -maxdepth 2 -type f -name Chart.yaml -printf "%h\n" | sort)
            echo "Found candidate chart dirs:"
            printf ' - %s\n' "${DIRS[@]:-<none>}"

            for CHDIR in "${DIRS[@]}"; do
              NAME="$(basename "$CHDIR")"
              if [[ -z "$BASE" ]] || git diff --name-only "$BASE"..HEAD -- "$CHDIR" | grep -q .; then
                echo "$NAME"  >> /tmp/names.txt
                echo "$CHDIR" >> /tmp/dirs.txt
              fi
            done
          fi

          echo "Selected charts:"
          cat /tmp/names.txt || true

          COUNT=$(wc -l < /tmp/names.txt | tr -d ' ')
          echo "count=$COUNT" >> $GITHUB_OUTPUT
          echo "names=$(paste -sd, /tmp/names.txt)" >> $GITHUB_OUTPUT

      - name: Stop if unchanged service
        if: steps.select.outputs.unchanged == 'true'
        run: echo "Nothing to publish."

      - name: Version-stamp and package charts
        if: steps.select.outputs.count != '0' && steps.select.outputs.unchanged != 'true'
        shell: bash
        run: |
          set -euo pipefail
          MOD='${{ steps.parse.outputs.module }}'
          VER='${{ steps.parse.outputs.version }}'
          export VER   # for yq env(VER)

          if [[ "$MOD" == "common" ]]; then
            # charts/common is a single library chart
            test -f "${CHARTS_DIR}/common/Chart.yaml"
            yq -i '.version = env(VER) | del(.appVersion)' "${CHARTS_DIR}/common/Chart.yaml"
            helm dependency update "${CHARTS_DIR}/common" || true
            mkdir -p packaged/common
            helm package "${CHARTS_DIR}/common" --destination packaged/common
          else
            mkdir -p "packaged/$MOD"
            while read -r CHDIR; do
              NAME="$(basename "$CHDIR")"
              echo "==> Packaging $CHDIR  (name: $NAME)"
              test -f "${CHDIR}/Chart.yaml"
              yq -i '.version = env(VER) | .appVersion = env(VER)' "${CHDIR}/Chart.yaml"
              helm dependency update "${CHDIR}" || true
              mkdir -p "packaged/${MOD}/${NAME}"
              helm package "${CHDIR}" --destination "packaged/${MOD}/${NAME}"
            done < /tmp/dirs.txt
          fi


      - name: Publish to gh-pages (module repos; per-chart subfolders)
        if: steps.select.outputs.count != '0' && steps.select.outputs.unchanged != 'true'
        shell: bash
        run: |
          set -euo pipefail
          MOD='${{ steps.parse.outputs.module }}'
          VER='${{ steps.parse.outputs.version }}'
          HOST='${{ env.GH_PAGES_HOST }}'
          URL="https://${HOST}/${MOD}"

          git fetch origin gh-pages:gh-pages || true
          git checkout gh-pages || git checkout --orphan gh-pages

          if [[ "$MOD" == "common" ]]; then
            mkdir -p "$MOD"
            cp -v packaged/$MOD/*/*.tgz "$MOD/" || true
          else
            tr ',' '\n' <<< '${{ steps.select.outputs.charts }}' | while read CHART; do
              [[ -n "$CHART" ]] || continue
              mkdir -p "$MOD/$CHART"
              cp -v "packaged/$MOD/$CHART/"*.tgz "$MOD/$CHART/" || true
            done
          fi

          # Build/merge index.yaml with URLs rewritten to subfolders
          mkdir -p _tmpindex
          [[ -f "$MOD/index.yaml" ]] && cp "$MOD/index.yaml" "_tmpindex/index-old.yaml" || true

          if [[ "$MOD" == "common" ]]; then
            cp -v "$MOD/"*.tgz "_tmpindex/" || true
            helm repo index _tmpindex --url "$URL" \
              ${MOD:+--merge "_tmpindex/index-old.yaml"} || true
            mv _tmpindex/index.yaml "$MOD/index.yaml"
          else
            find "$MOD" -mindepth 2 -maxdepth 2 -name '*.tgz' -print0 \
              | while IFS= read -r -d '' f; do ln -sf "../$f" "_tmpindex/$(basename "$f")"; done
            if [[ -f "_tmpindex/index-old.yaml" ]]; then
              helm repo index _tmpindex --url "$URL" --merge "_tmpindex/index-old.yaml"
            else
              helm repo index _tmpindex --url "$URL"
            fi
            export URL
            yq -i '
              .entries |= with_entries(
                .value |= map(
                  .urls = [ (.urls[0] | sub(env(URL) + "/", env(URL) + "/" + .name + "/")) ]
                )
              )
            ' _tmpindex/index.yaml
            mv _tmpindex/index.yaml "$MOD/index.yaml"
          fi
          rm -rf _tmpindex

          git config user.name "github-actions"
          git config user.email "actions@users.noreply.github.com"
          git add "$MOD"
          git commit -m "release(${MOD}): update index and packages for ${VER}" || echo "nothing to commit"
          git push origin gh-pages
