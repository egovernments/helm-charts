name: Urban Helm Charts Release

on:
  push:
    tags:
      - "v*"

jobs:
  release:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install tools (yq + Helm)
        run: |
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

      - name: Extract current tag
        id: tag
        run: |
          VERSION="${GITHUB_REF#refs/tags/v}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "module=urban" >> $GITHUB_OUTPUT

      - name: Find previous tag
        id: previous
        run: |
          PREV=$(git tag --sort=-creatordate | grep '^v' | grep -v "${GITHUB_REF#refs/tags/}" | head -n 1 || true)
          echo "prev=$PREV" >> $GITHUB_OUTPUT

      - name: Detect changed charts
        id: changed
        run: |
          CHANGED=""
          for dir in charts/urban/*/; do
            CHART=$(basename "$dir")
            if [[ -z "${{ steps.previous.outputs.prev }}" ]]; then
              CHANGED+="$CHART "
              continue
            fi
            if git diff --quiet "${{ steps.previous.outputs.prev }}"..HEAD -- "$dir"; then
              echo "No change in $CHART"
            else
              echo "$CHART changed"
              CHANGED+="$CHART "
            fi
          done
          echo "changed_charts=$CHANGED" >> $GITHUB_OUTPUT

      - name: Package and index changed charts
        if: steps.changed.outputs.changed_charts != ''
        run: |
          mkdir -p repo/urban
          VERSION="${{ steps.tag.outputs.version }}"
          CHANGED="${{ steps.changed.outputs.changed_charts }}"

          # Fetch latest released version of 'common' from chart repo index
          INDEX=$(curl -s https://helm.digit.org/urban/index.yaml)
          COMMON_ALREADY_RELEASED=false
          COMMON_VERSION_FROM_REPO=""

          if echo "$INDEX" | yq -e '.entries.common' > /dev/null 2>&1; then
            COMMON_ALREADY_RELEASED=true
            COMMON_VERSION_FROM_REPO=$(echo "$INDEX" | yq -r '.entries.common | sort_by(.version) | .[-1].version')
            echo "✅ common is already released: $COMMON_VERSION_FROM_REPO"
          else
            echo "⚠️ No common release found yet"
          fi

          # Always package common if not already released
          # Or if common is part of changed charts
          PACKAGE_COMMON=false
          if [[ "$COMMON_ALREADY_RELEASED" == "false" ]]; then
            PACKAGE_COMMON=true
          elif echo "$CHANGED" | grep -qw common; then
            PACKAGE_COMMON=true
          fi

          if [[ "$PACKAGE_COMMON" == "true" ]]; then
            echo "📦 Packaging 'common' with version $VERSION"
            CHART_PATH="charts/urban/common"
            TARGET_DIR="repo/urban/common"
            mkdir -p "$TARGET_DIR"
            yq e -i ".version = \"$VERSION\"" "$CHART_PATH/Chart.yaml"
            helm package "$CHART_PATH" --version "$VERSION" --destination "$TARGET_DIR"
            helm repo index "$TARGET_DIR" \
              --url "https://helm.digit.org/urban/common"
            COMMON_VERSION_TO_USE="$VERSION"
          else
            echo "✅ Reusing existing common version: $COMMON_VERSION_FROM_REPO"
            COMMON_VERSION_TO_USE="$COMMON_VERSION_FROM_REPO"
          fi

          # Now package the other changed charts
          for CHART in $CHANGED; do
            if [[ "$CHART" == "common" && "$PACKAGE_COMMON" == "true" ]]; then
              continue  # already packaged
            fi

            CHART_PATH="charts/urban/$CHART"
            TARGET_DIR="repo/urban/$CHART"
            mkdir -p "$TARGET_DIR"

            echo "Updating $CHART to version $VERSION"
            yq e -i ".version = \"$VERSION\"" "$CHART_PATH/Chart.yaml"

            echo "Updating $CHART to use common@$COMMON_VERSION_TO_USE"
            YQ_EXPR=".dependencies |= map(
              if .name == \"common\" then
                .version = \"$COMMON_VERSION_TO_USE\"
              else
                .
              end
            )"

            yq e -i "$YQ_EXPR" "$CHART_PATH/Chart.yaml"

            helm repo add urban https://helm.digit.org/urban
            helm dependency update "$CHART_PATH"
            helm package "$CHART_PATH" --version "$VERSION" --destination "$TARGET_DIR"

            if [[ -f "$TARGET_DIR/index.yaml" ]]; then
              helm repo index "$TARGET_DIR" \
                --url "https://helm.digit.org/urban/$CHART" \
                --merge "$TARGET_DIR/index.yaml"
            else
              helm repo index "$TARGET_DIR" \
                --url "https://helm.digit.org/urban/$CHART"
            fi
          done

      - name: Merge new chart indexes into existing index.yaml
        run: |
          mkdir -p repo/urban
          MERGED="repo/urban/index.yaml"
          EXISTING_INDEX_URL="https://raw.githubusercontent.com/${{ github.repository }}/gh-pages/urban/index.yaml"

          # Download existing index.yaml from gh-pages if it exists
          curl -sfL "$EXISTING_INDEX_URL" -o "$MERGED" || {
            echo "No existing index.yaml found. Creating a new one."
            echo "apiVersion: v1" > "$MERGED"
            echo "entries: {}" >> "$MERGED"
          }

          # Merge new chart indexes into the existing one
          for CHART_DIR in repo/urban/*/; do
            if [[ -f "$CHART_DIR/index.yaml" ]]; then
              echo "Merging $CHART_DIR/index.yaml into $MERGED"
              yq ea '. as $item ireduce ({}; . *+ $item )' "$MERGED" "$CHART_DIR/index.yaml" > tmp.yaml && mv tmp.yaml "$MERGED"
            fi
          done

      - name: Deploy to GitHub Pages (gh-pages/urban)
        uses: peaceiris/actions-gh-pages@v4
        if: steps.changed.outputs.changed_charts != ''
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./repo/urban
          publish_branch: gh-pages
          destination_dir: urban
          keep_files: true
